<launch>
  <!-- common param -->
  <arg name="common_param_path"/>
  <arg name="vehicle_param_file"/>

  <arg name="input_path_topic" default="/planning/scenario_planning/lane_driving/behavior_planning/path"/>
  <arg name="use_surround_obstacle_check" default="true"/>
  <arg name="launch_motion_out_of_lane_module" default="true"/>
  <arg name="launch_module_list_end" default="&quot;&quot;]"/>

  <!-- assemble launch config for motion velocity planner -->
  <arg name="motion_velocity_planner_launch_modules" default="["/>
  <let
    name="motion_velocity_planner_launch_modules"
    value="$(eval &quot;'$(var motion_velocity_planner_launch_modules)' + 'autoware::motion_velocity_planner::OutOfLaneModule, '&quot;)"
    if="$(var launch_motion_out_of_lane_module)"
  />
  <let
    name="motion_velocity_planner_launch_modules"
    value="$(eval &quot;'$(var motion_velocity_planner_launch_modules)' + 'motion_velocity_planner::DynamicObstacleStopModule, '&quot;)"
    if="$(var launch_dynamic_obstacle_stop_module)"
  />
  <let name="motion_velocity_planner_launch_modules" value="$(eval &quot;'$(var motion_velocity_planner_launch_modules)' + '$(var launch_module_list_end)'&quot;)"/>

  <!-- path planning for avoiding obstacle with dynamic object info -->
  <group>
    <include file="$(find-pkg-share obstacle_avoidance_planner)/launch/obstacle_avoidance_planner.launch.xml">
      <arg name="param_path" value="$(find-pkg-share tier4_planning_launch)/config/scenario_planning/lane_driving/motion_planning/obstacle_avoidance_planner/obstacle_avoidance_planner.param.yaml"/>
      <arg name="input_path_topic" value="$(var input_path_topic)"/>
      <arg name="output_path_topic" value="obstacle_avoidance_planner/trajectory"/>
      <arg name="vehicle_param_file" value="$(var vehicle_param_file)"/>
    </include>
  </group>

  <!-- surround obstacle checker (Do not start if there are pedestrian/bicycles around ego-car) -->
  <group if="$(var use_surround_obstacle_check)">
    <include file="$(find-pkg-share surround_obstacle_checker)/launch/surround_obstacle_checker.launch.xml">
      <arg name="param_path" value="$(find-pkg-share tier4_planning_launch)/config/scenario_planning/lane_driving/motion_planning/surround_obstacle_checker/surround_obstacle_checker.param.yaml"/>
      <arg name="vehicle_param_file" value="$(var vehicle_param_file)"/>
    </include>
  </group>

  <!-- stop velocity planning with obstacle pointcloud info -->
  <group>
    <include file="$(find-pkg-share obstacle_stop_planner)/launch/obstacle_stop_planner.launch.xml">
      <!-- load config files -->
      <arg name="common_param_path" value="$(var common_param_path)"/>
      <arg name="vehicle_param_file" value="$(var vehicle_param_file)"/>
      <arg name="adaptive_cruise_control_param_path" value="$(find-pkg-share tier4_planning_launch)/config/obstacle_stop_planner/adaptive_cruise_control.param.yaml"/>
      <arg name="obstacle_stop_planner_param_path" value="$(find-pkg-share tier4_planning_launch)/config/obstacle_stop_planner/obstacle_stop_planner.param.yaml"/>
      <arg name="enable_slow_down" value="false"/>
      <!-- remap topic name -->
      <arg name="input_trajectory" value="obstacle_avoidance_planner/trajectory"/>
      <arg name="input_pointcloud" value="/perception/obstacle_segmentation/pointcloud"/>
      <arg name="output_trajectory" value="/planning/scenario_planning/lane_driving/trajectory"/>
    </include>
  </group>
  <!-- plan slowdown or stops on the final trajectory -->
  <group>
    <load_composable_node target="/planning/scenario_planning/lane_driving/motion_planning/motion_planning_container">
      <composable_node pkg="autoware_motion_velocity_planner_node" plugin="autoware::motion_velocity_planner::MotionVelocityPlannerNode" name="motion_velocity_planner" namespace="">
        <!-- topic remap -->
        <remap from="~/input/trajectory" to="obstacle_avoidance_planner/trajectory"/>
        <remap from="~/input/vector_map" to="/map/vector_map"/>
        <remap from="~/input/vehicle_odometry" to="/localization/kinematic_state"/>
        <remap from="~/input/accel" to="/localization/acceleration"/>
        <remap from="~/input/dynamic_objects" to="/perception/object_recognition/objects"/>
        <remap from="~/input/no_ground_pointcloud" to="/perception/obstacle_segmentation/pointcloud"/>
        <remap from="~/input/traffic_signals" to="/perception/traffic_light_recognition/traffic_signals"/>
        <remap from="~/input/virtual_traffic_light_states" to="/perception/virtual_traffic_light_states"/>
        <remap from="~/input/occupancy_grid" to="/perception/occupancy_grid_map/map"/>
        <remap from="~/output/trajectory" to="motion_velocity_planner/trajectory"/>
        <remap from="~/output/stop_reasons" to="/planning/scenario_planning/status/stop_reasons"/>
        <remap from="~/output/velocity_factors" to="/planning/velocity_factors/motion_velocity_planner"/>
        <!-- params -->
        <param name="launch_modules" value="$(var motion_velocity_planner_launch_modules)"/>
        <param from="$(var common_param_path)"/>
        <param from="$(var vehicle_param_file)"/>
        <param from="$(var nearest_search_param_path)"/>
        <param from="$(var motion_velocity_smoother_param_path)"/>
        <param from="$(var motion_velocity_smoother_type_param_path)"/>
        <param from="$(var motion_velocity_planner_param_path)"/>
        <param from="$(var motion_velocity_planner_out_of_lane_module_param_path)"/>
        <!-- <param from="$(var motion_velocity_planner_template_param_path)"/> -->
        <!-- composable node config -->
        <extra_arg name="use_intra_process_comms" value="false"/>
      </composable_node>
    </load_composable_node>
  </group>
</launch>
