<?xml version="1.0"?>
<launch>
  <arg name="enable_image_decompressor" default="true" description="enable image decompressor"/>
  <arg name="enable_fine_detection" default="true" description="enable fine position adjustment of traffic light"/>
  <arg name="fine_detector_label_path" default="$(find-pkg-share traffic_light_fine_detector)/data/tlr_labels.txt" description="fine detector label path"/>
  <arg name="fine_detector_model_path" default="$(find-pkg-share traffic_light_fine_detector)/data/tlr_yolox_s.onnx" description="fine detector onnx model path"/>
  <arg name="classifier_label_path" default="$(find-pkg-share traffic_light_classifier)/data/lamp_labels.txt" description="classifier label path"/>
  <arg name="classifier_model_path" default="$(find-pkg-share traffic_light_classifier)/data/traffic_light_classifier_efficientNet_b1.onnx" description="classifier onnx model path"/>
  <arg name="output/traffic_signals" default="/perception/traffic_light_recognition/traffic_signals"/>
  <arg name="use_crosswalk_traffic_light_estimator" default="true" description="output pedestrian's traffic light signals"/>
  <let name="namespace1" value="camera6"/>
  <let name="namespace2" value="camera7"/>
  <let name="all_camera_namespaces" value="[$(var namespace1), $(var namespace2)]"/>
  <!-- camera 6 TLR pipeline -->
  <group>
    <push-ros-namespace namespace="$(var namespace1)"/>
    <let name="input/image" value="/sensing/camera/$(var namespace1)/image_raw"/>
    <let name="input/camera_info" value="/sensing/camera/$(var namespace1)/camera_info"/>
    <let name="map_based_detector_output_topic" value="rough/rois" if="$(var enable_fine_detection)"/>
    <let name="map_based_detector_output_topic" value="rois" unless="$(var enable_fine_detection)"/>

    <node pkg="topic_tools" exec="relay" name="traffic_light_camra_info_relay" args="$(var input/camera_info) camera_info"/>
    <include file="$(find-pkg-share traffic_light_map_based_detector)/launch/traffic_light_map_based_detector.launch.xml">
      <arg name="input/camera_info" value="$(var input/camera_info)"/>
      <arg name="min_timestamp_offset" value="-0.3"/>
      <arg name="expect/rois" value="expect/rois"/>
      <arg name="output/rois" value="$(var map_based_detector_output_topic)"/>
      <arg name="output/camera_info" value="camera_info"/>
    </include>

    <include file="$(find-pkg-share tier4_perception_launch)/launch/traffic_light_recognition/traffic_light_node_container.launch.py">
      <arg name="input/image" value="$(var input/image)"/>
      <arg name="enable_image_decompressor" value="$(var enable_image_decompressor)"/>
      <arg name="enable_fine_detection" value="$(var enable_fine_detection)"/>
      <arg name="use_crosswalk_traffic_light_estimator" value="$(var use_crosswalk_traffic_light_estimator)"/>
      <arg name="use_intra_process" value="true"/>
      <arg name="use_multithread" value="true"/>
      <arg name="fine_detector_label_path" value="$(var fine_detector_label_path)"/>
      <arg name="fine_detector_model_path" value="$(var fine_detector_model_path)"/>
      <arg name="classifier_label_path" value="$(var classifier_label_path)"/>
      <arg name="classifier_model_path" value="$(var classifier_model_path)"/>
    </include>
  </group>
  <!-- camera 7 TLR pipeline -->
  <group>
    <push-ros-namespace namespace="$(var namespace2)"/>
    <let name="input/image" value="/sensing/camera/$(var namespace2)/image_raw"/>
    <let name="input/camera_info" value="/sensing/camera/$(var namespace2)/camera_info"/>
    <let name="map_based_detector_output_topic" value="rough/rois" if="$(var enable_fine_detection)"/>
    <let name="map_based_detector_output_topic" value="rois" unless="$(var enable_fine_detection)"/>

    <node pkg="topic_tools" exec="relay" name="traffic_light_camra_info_relay" args="$(var input/camera_info) camera_info"/>
    <include file="$(find-pkg-share traffic_light_map_based_detector)/launch/traffic_light_map_based_detector.launch.xml">
      <arg name="input/camera_info" value="$(var input/camera_info)"/>
      <arg name="min_timestamp_offset" value="-0.04"/>
      <arg name="expect/rois" value="expect/rois"/>
      <arg name="output/rois" value="$(var map_based_detector_output_topic)"/>
      <arg name="output/camera_info" value="camera_info"/>
    </include>

    <include file="$(find-pkg-share tier4_perception_launch)/launch/traffic_light_recognition/traffic_light_node_container.launch.py">
      <arg name="input/image" value="$(var input/image)"/>
      <arg name="enable_image_decompressor" value="$(var enable_image_decompressor)"/>
      <arg name="enable_fine_detection" value="$(var enable_fine_detection)"/>
      <arg name="use_crosswalk_traffic_light_estimator" value="$(var use_crosswalk_traffic_light_estimator)"/>
      <arg name="use_intra_process" value="true"/>
      <arg name="use_multithread" value="true"/>
      <arg name="fine_detector_label_path" value="$(var fine_detector_label_path)"/>
      <arg name="fine_detector_model_path" value="$(var fine_detector_model_path)"/>
      <arg name="classifier_label_path" value="$(var classifier_label_path)"/>
      <arg name="classifier_model_path" value="$(var classifier_model_path)"/>
    </include>
  </group>
  <!-- traffic_light_multi_camera_fusion -->
  <group>
    <node pkg="traffic_light_multi_camera_fusion" exec="traffic_light_multi_camera_fusion_node" name="traffic_light_multi_camera_fusion" output="screen">
      <param name="camera_namespaces" value="$(var all_camera_namespaces)"/>
      <param name="perform_group_fusion" value="true"/>
      <remap from="~/input/vector_map" to="/map/vector_map"/>
      <remap from="~/output/traffic_signals" to="$(var output/traffic_signals)"/>
    </node>
  </group>
  <!-- visualizer -->
  <group>
    <include file="$(find-pkg-share traffic_light_visualization)/launch/traffic_light_map_visualizer.launch.xml"/>
  </group>
</launch>
